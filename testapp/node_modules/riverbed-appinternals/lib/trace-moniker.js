/* ****************************
** Copyright (c) 2017        **
** Riverbed Technology, Inc. **
** All Rights Reserved.      **
** ************************* */

"use strict";

// *****************************
// Process-Moniker Generation Module
// *****************************

// required modules
var traceOutput = require('./trace-output-api'),
	traceUtil = require('./trace-util'),
	util = require('util');

// internal variables
var processMoniker;

var maxCustomMonikerLen = 30,
	maxJsFilenameLen = 15,
	maxJsFilePathLen = 15;

// -----------------------------
// Internal Functions
// -----------------------------

function sanitizeString(str) {

	// Replacing - since it is used as a delimiter in the marker file name.
	if(str && traceUtil.isString(str) && str.length > 0) {
		return str.replace(/[\s\\\/\*\|<>=:.,'"-]/g,"_");
	}

	return '';
}

function sanitizeStringAndTruncate(str,maxLen,removeFromEnd) {
	var sanitized = sanitizeString(str);
	if(sanitized.length <= maxLen){
		return sanitized;
	}
	if(removeFromEnd) {
		return sanitized.slice(0,maxLen);
	} else {
		return sanitized.slice(0-maxLen);
	}
}

// -----------------------------
// External Functions
// -----------------------------
exports.init = function(opts){
	if(opts && opts.moniker && opts.moniker.override && traceUtil.isString(opts.moniker.override)){
		// user opted to totally override the process moniker.
		// use the moniker specified by the user
		processMoniker = sanitizeStringAndTruncate(opts.moniker.override,maxCustomMonikerLen,true);
		traceOutput.debug('trace-moniker.init','user specified process-moniker as: '+processMoniker);
	} else {
		// generating a moniker based on the main JS file (process.argv[1])
		// and the set of Node.js execution args (process.execArgv)

		processMoniker = "";
		var jsFileAndPath = traceUtil.pathParse(process.argv[1]);

		// // Let's keep the monikers simple for now. Not using execArgv
		// if(process.execArgv && process.execArgv.length>0) {
		// 	for(var i=0; i<process.execArgv.length; i++) {
		// 		processMoniker = processMoniker + " " + process.execArgv[i];
		// 	}
		// }
		var baseName = jsFileAndPath.name;
		var isFilename = true;

		// prefer to use NPM package name if present.
		// should exist if "name" is set in package.json AND application is started with npm
		if (process.env && process.env['npm_package_name']) {
			baseName = process.env['npm_package_name'];
			isFilename = false;
		}

		if(opts && opts.moniker) {
			// user wants the moniker to be extended to include some additional application args
			if(opts.moniker.argvPositions && util.isArray(opts.moniker.argvPositions)) {
				traceOutput.debug('trace-moniker.init','user extended process moniker with argv positions: '+opts.moniker.argvPositions);
				for(var j=0; j<opts.moniker.argvPositions.length; j++) {
					var argPos = opts.moniker.argvPositions[j];
					if(traceUtil.isNumber(argPos) && argPos < process.argv.length) {
						baseName = baseName + "_" + process.argv[argPos];
					} else {
						traceOutput.error('trace-moniker.init','user specified invalid argv position: '+argPos);
					}
				}
			}

			// user wants the moniker to be extended with some string suffix
			if(opts.moniker.suffix && traceUtil.isString(opts.moniker.suffix)) {
				traceOutput.debug('trace-moniker.init','user extended process moniker with suffix: '+opts.moniker.suffix);
				baseName = baseName + "_" + opts.moniker.suffix;
			}
		}

		processMoniker = sanitizeStringAndTruncate(baseName,maxJsFilenameLen,true);
		if(isFilename) {
			// for filenames, extend with path to file
			// don't do this for NPM package names
			processMoniker = processMoniker + '_' + sanitizeStringAndTruncate(jsFileAndPath.dir,maxJsFilePathLen,false);
		}

		traceOutput.info('trace-moniker.init','generated process moniker: '+processMoniker);
	}

};

exports.getProcessMoniker = function() {
	return processMoniker;
}