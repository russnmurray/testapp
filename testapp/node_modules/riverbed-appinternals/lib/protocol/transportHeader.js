/* ****************************
** Copyright (c) 2015        **
** Riverbed Technology, Inc. **
** All Rights Reserved.      **
** ************************* */

"use strict";

var logger = require('../trace-output-tcp'),
	msgUtil = require('../protocol/util'),
    msgcon = require('../protocol/constants');

//-----------------------------
//Internal Constants
//-----------------------------

var logLocation = 'transportHeader';

//-----------------------------
//Internal Variables
//-----------------------------

//-----------------------------
//Internal Functions
//-----------------------------

function decimalToHex(dNum) {
	  var hex = Number(dNum).toString(16);
	  hex = "0000".substr(0, 4 - hex.length) + hex; 
	  return hex;
}

//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
//NOTE:  if log messages are needed in the encode method - use console.log (info, etc); 
//Logging from inside any method called (directly or indirectly) as a result of calling 
//trace-output-tcp.logMessage creates the potential for a blown stack 
//(as LogMessage calls LogMessage calls LogMessage.......)

//-----------------------------
//External Functions
//-----------------------------

// write transport header as UTF-8 strings
// transport header is 8 bytes in length
var encode = exports.encode = function (buffer, sndLength) {
	buffer.write(decimalToHex(sndLength));
	buffer.write(msgUtil.endianness, 4);
	buffer.write(msgcon.CharEncoding.UTF8, 6);
}

var decode = exports.decode = function(buffer) {
	var transportHdr = {
		valid 		 : true,
		hdrLength	 : msgcon.TRANSPORT_HDR_LEN,
		rcvdLength	 : 0,
		encoding   	 : "",		//Encoding from constants.js
		charEncoding : ""		//CharEncoding from constants.js
	};
	
	if (buffer.length < msgcon.TRANSPORT_HDR_LEN) {
		logger.logError(logLocation+'.decode', 'transport header is an invalid length:'+buffer.length);
		transportHdr.valid = false;
		return transportHdr;
	}

	var transportHeader = buffer.slice(0, msgcon.TRANSPORT_HDR_LEN);
	transportHdr.rcvdLength = parseInt(transportHeader.toString('utf8',0,4), 16);
	transportHdr.encoding = transportHeader.toString('utf8',4,6);
	transportHdr.charEncoding = transportHeader.toString('utf8',6,8);

	return transportHdr;
}
