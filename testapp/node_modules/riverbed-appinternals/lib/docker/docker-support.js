/* ****************************
** Copyright (c) 2017        **
** Riverbed Technology, Inc. **
** All Rights Reserved.      **
** ************************* */

"use strict";

// *****************************
// Docker Support
// based on https://gitlab.lab.nbttech.com/appinternals/instrumentation/blob/develop/JidaCore/src/com/riverbed/instrumentation/da/jida/DockerSupport.java#L104
//
// The logic to find the container ID has been coordinated in the following areas and is intended
// to work the same in each area.  When updating the code that finds the container ID, be sure to
// coordinate with the other areas.
//
// Instrumentation:
// https://gitlab.lab.nbttech.com/appinternals/instrumentation/blob/release/10.12.0/AwSharedDockerSupport/src/DockerSupport.cpp
// ProcessDiscovery:
// https://gitlab.lab.nbttech.com/appinternals/instrumentation/blob/release/10.12.0/ProcessDiscoveryManaged/src/com/riverbed/instrumentation/pe/docker/DockerUtility.java
// Node-JS:
// https://gitlab.lab.nbttech.com/appinternals/node-jsi/blob/release/10.12.0/instrumentation/lib/docker/docker-support.js
// RPILJ:
// https://gitlab.lab.nbttech.com/appinternals/instrumentation/blob/release/10.12.0/rpil/linux/rpilj/ProcessMarker.c
// DockerDA:
// https://gitlab.lab.nbttech.com/appinternals/agent-shared/blob/release/10.12.0/projects/agentrt-plugin/src/com/riverbed/agentrt/plugin/linuxos/LinuxOSStats.java
// *****************************

var os = require('os');
var fs = require('fs');
var traceOutputApi = require('../trace-output-api');
var inet_ipv4 = require('inet_ipv4');

var DOCKER_HOST_ENV_VAR = "RVBD_DSAHOST";

var PROC_SELF_CONTROL_GROUP = "/proc/self/cpuset";
var shortDockerContainerId = null;
var longDockerContainerId = null;
var inited = false;
var inDockerContainerFlag = false;
var dockerHostname = "unknown";
var dsaIp = null;
var containerHostname = null;
var containerImageName = ""; // never null
var containerName = "";      // never null
var envContainerName = "";   // never null
var envContainerImage = "";  // never null
var isWindows = (os.platform() == 'win32');
var windowsOverrideForTesting = false;
var firstMessage = true;

var optionsDockerHost = null;

var init = exports.init = function(options) {
    if (isWindows  && !windowsOverrideForTesting) {
        inited = true;
    }

    if (inited) {
        return;
    }

    if(options && options.docker && options.docker.host) {
        optionsDockerHost = options.docker.host;
    }

    try {
        var lines = fs.readFileSync(PROC_SELF_CONTROL_GROUP,'utf8').split('\n');

        if(options && options.docker && options.docker.controlgroup) {
            var userPre = options.docker.controlgroup.prefix;
            var userPost = options.docker.controlgroup.postfix;
        }

        var foundIt = false;
        for (var l=0; lines && !foundIt && l<lines.length; l++) {
            var line = lines[l];
			foundIt = findUserDockerContainerId(line, userPre, userPost);
			if (!foundIt) {
				foundIt = findDockerContainerId(line);
			}
        }
    } catch (e) {
        traceOutputApi.debug('docker-support.init','error determining docker support: '+e);
    }

    if (longDockerContainerId!=null && longDockerContainerId.length>12) {
        shortDockerContainerId = longDockerContainerId.substring(0, 12);
        initDockerHostIp();
        inDockerContainerFlag = true;
    }

    if (shortDockerContainerId!= null) {
        traceOutputApi.debug('docker-support.init',"In Docker container: " + shortDockerContainerId);
    }

    // get $HOSTNAME, which docker supplies for us
    containerHostname = process.env["HOSTNAME"];
    if (!containerHostname) {
        containerHostname = "";
    }

    inited = true;

    traceOutputApi.debug('docker-support.init','-----------------------------');
	traceOutputApi.debug('docker-support.init','-------- DOCKER INFO --------');
	traceOutputApi.debug('docker-support.init','inDockerContainer: '+inDockerContainerFlag);
	traceOutputApi.debug('docker-support.init','DockerHostName: '+dockerHostname);
	traceOutputApi.debug('docker-support.init','DockerHostIpAddr: '+dsaIp);
	traceOutputApi.debug('docker-support.init','ShortDockerContainerId: '+shortDockerContainerId);
	traceOutputApi.debug('docker-support.init','LongDockerContainerId: '+longDockerContainerId);
	traceOutputApi.debug('docker-support.init','ContainerHostname: '+containerHostname);
	traceOutputApi.debug('docker-support.init','-----------------------------');

};

// This is the code that has been coordinated with other areas.
function findDockerContainerId(line) {

	// Split on non-hex characters, resulting in arrays of hex characters.
	var hexStrTokens = line.split(/[^0-9a-fA-F]/);
	var numHexStrTokens = hexStrTokens.length;

	for (var i = 0; i < numHexStrTokens; i++) {

		// Must be 64 characters in length (no more, no less).
		if (hexStrTokens[i].length == 64) {
			longDockerContainerId = hexStrTokens[i];
			return true;
		}
	}
	return false;
}

// Useful if a container ID format is encountered that we cannot
// handle in findDockerContainerId.
function findUserDockerContainerId(line, preString, postString) {
    if(!line || (!preString && !postString)) {
        return false;
    }

    var preIndex = 0;
    var preLength = 0;
    if(preString) {
        preLength = preString.length;
        preIndex = line.indexOf(preString);
        if(preIndex < 0){
            return false;
        }
    }
    var startIndex = preIndex + preLength;

    var postIndex = line.length;
    if(postString) {
        postIndex = line.indexOf(postString, startIndex);
        if ( postIndex < 0) {
            return false;
        }
    }

    longDockerContainerId = line.substring( startIndex, postIndex);
    return true;
}

function getDockerGateway() {

    var gw = null;

    try {
        var lines = fs.readFileSync('/proc/net/route','utf8').split('\n');
        for(var l=0; l<lines.length; l++) {
            // OUTPUT FORMAT
            //    Iface	Destination	Gateway 	Flags	RefCnt	Use	Metric	Mask		MTU	Window	IRTT
            //    eth0	00000000	010011AC	0003	0	0	0	00000000	00	0
            //    eth0	000011AC	00000000	0001	0	0	0	0000FFFF	00	0
            //
            // parts[0] = p
            // parts[1] = c
            // parts[2] = g
            var parts = lines[l].split('\t');
            if(parts.length>1 && parts[0] && parts[1] && parts[1] == "00000000") {  // "default interface"
                if(parts.length>2 && parts[2]) {
                    // Convert gateway string to int then to w.x.y.z
                    var ng = parseInt(parts[2],16);
                    return inet_ipv4.ntoa(ng);
                }
                break;
            }
        }
    } catch(e) {
        traceOutputApi.debug('docker-support.getDockerGateway','error determining default gateway: '+e);
    }

    return null;
}

function initDockerHostIp() {
    if (windowsOverrideForTesting) {
         dsaIp = null;
         return;
    }

    if (process.env[DOCKER_HOST_ENV_VAR]){
        dsaIp = process.env[DOCKER_HOST_ENV_VAR];
    } else {
        if(optionsDockerHost) {
            dsaIp = optionsDockerHost;
        } else {
            // If this is null, we could read .fqdn.txt...
            // FUTURE: do this some other way (parse /proc/net/route)
            // NOTE: /proc/net/route may not be on Solaris or AIX.
            dsaIp = getDockerGateway();
            if (dsaIp==null) {
                // If there was no Gateway, then the container was not started with
                // the default Bridge network.
                // If it was started with Host network, then this will work::
                dsaIp = "127.0.0.1";
            }
        }
    }
}

var inDockerContainer = exports.inDockerContainer = function() {
    if (isWindows) {
        // Not supported yet
        return false;
    }
    return inDockerContainerFlag;
};

var getDockerHostName = exports.getDockerHostName = function() {
    return dockerHostname;
};

var getDockerHostIpAddr = exports.getDockerHostIpAddr = function() {
    return dsaIp;
};

var getShortDockerContainerId = exports.getShortDockerContainerId = function() {
    return shortDockerContainerId;
};

var getLongDockerContainerId = exports.getLongDockerContainerId = function() {
    return longDockerContainerId;
};

var getContainerHostname = exports.getContainerHostname = function(){
    return containerHostname;
};

