/* ****************************
** Copyright (c) 2015        **
** Riverbed Technology, Inc. **
** All Rights Reserved.      **
** ************************* */

"use strict";

var TRANSPORT_HDR_LEN = exports.TRANSPORT_HDR_LEN = 8;
var MSG_HDR_LEN_MAX = exports.MSG_HDR_LEN_MAX =32;  //UsedFlag(1) + sessionId(4) + MsgProcUui(16) + MsgProcVer(4) + ReqId(4) = 29

var INVALID_HANDLE_VALUE = exports.INVALID_HANDLE_VALUE = 0x0;

// 8 bit flag
var MsgHdrUsedFlag = exports.MsgHdrUsedFlag = {
		"SessionId"				: 0x80,				//10000000 = bits
		"MsgProcessor"			: 0x40,				//01000000
		"MsgProcessorVersion"	: 0x20,				//00100000
		"RequestResponse"		: 0x10,				//00010000
		"MessageId"				: 0x08				//00001000
}; 
Object.freeze(MsgHdrUsedFlag);

// NOTE:  These opcodes must match what is defined in the NodeDA (2015-09-22)

// 0x02 = Missing - returned when there is no entry in the Agent configuration
// mapping file. Typically means the app has never been seen before and we should
// ignore the config change because it is a result of registering with the NodeDA
// and not a result of a user change
var ConfigChgInstrumentationState = exports.ConfigChgInstrumentationState = {
		"Missing"          	: 0x02,				//00000011
		"Instrumented"  	: 0x01,				//00000001
		"NotInstrumented"	: 0x00				//00000000
}; 
Object.freeze(MsgHdrUsedFlag);

// Encoding Types - The encoding type is encoded as a two character (2 bytes) 
// UTF-8/ASCII string. The following lists the currently supported types in the Noda DA.
// We are only supporting BinaryLittleEndian and BinaryBigEndian. 
var Encoding = exports.Encoding = {"BinaryLittleEndian":"00", 
		        				   "BinaryBigEndian":"01", 
		        				   "JSON":"02"
};
Object.freeze(Encoding);

//Encoding Subtypes (Character Encoding) - The subtype specifies the character 
//set to be used. The encoding subtype is also specified as a two character 
//(2 bytes) UTF-8/ASCII string. The most commonly used character encodings are 
//specified by a numerical value while other, more obscure, character encodings can 
//be specified by string. The following lists the supported numerical character encodings:  
var CharEncoding = exports.CharEncoding = {"Defined":"00", 
		   								 "ASCII":"01", 
		   								 "UTF8":"02",
		   								 "UTF16_BE":"03", 
		   								 "UTF16_LE":"04",
		   								 "ISO_8859":"05",
		   								 "UTF32_BE":"06", 
		   								 "UTF32_LE":"07"
};
Object.freeze(CharEncoding);


var DataType = exports.DataType = {"String": 0x00, 
			 					   "Byte": 0x01, 
			 					   "Int16": 0x02,
			 					   "Int32": 0x03,
			 					   "Int64": 0x04,
			 					   "Float": 0x05,
			 					   "Double": 0x06, 
			 					   "DOH": 0x07,     // Data Object Handle 
			 					   "DCH": 0x08,     // Data Class Handle 
			 					   "END": 0xff
};
Object.freeze(DataType);

var Opcode = exports.Opcode = {"BeginSession":1,
							   "EndSession":2,
							   "Identity":3,
							   "CreateTypeDefinition":4,
							   "RegisterObject":5,
							   "UnregisterObject":6,
							   "CreateFunction":7,
							   "CreateMetricGroup":8,
							   "CallStart":9,
							   "CallComplete":10,
							   "SampleData":11, 
							   "CreateEvent":12,
							   "FireEvent":13, 
							   "GetCommands":14, 
							   "QueryCommand":15, 
							   "Invoke":16 ,
							   "CreateTraceProperties":17,
							   "ConfigChange":18,
							   "ConfigNotify":19,
							   "LogMessage":20
};
Object.freeze(Opcode);

var TraceProps = exports.TraceProps = {"txId":".thread",
									   "category":".category",
		   							   "file":".class",
		   							   "method":".method",
		   							   "time":".time",
		   							   "props":"props"
};
Object.freeze(TraceProps);

var MetricType = exports.MetricType = {"Value":0x0,
							           "Rate":0x1 
};
Object.freeze(MetricType);

var Instance = exports.Instance = {"Single":0x0,
							       "Multi":0x1 
};
Object.freeze(Instance);


