/* ****************************
** Copyright (c) 2015        **
** Riverbed Technology, Inc. **
** All Rights Reserved.      **
** ************************* */

var msgcon = require('../protocol/constants');
   
function Sample (dataType, value) {
		
	this.dataType = dataType;
	this.value = value;
}

function Metric (name, displayName, description, metricType, dataType) {

	this.name = name;
	this.displayName = displayName;
	this.description = description;
	this.metricType = metricType;
	this.dataType = dataType;
}

function MetricGroup (id, name, description, instance) {
	
	this.id = id;
	this.name = name;
	this.description = description;
	this.instance = instance;
	this.instanceNames = {};
	this.metrics = [];
	this.samples = {};
}

function createMetric (name, displayName, description, instanceName, dataType, metricType,
		               metrics, samples, instanceNames) {

	// Defining samples here limits them to be single-instance.
	// Would need to let the user define them to support multiple-instances.
	// Also data type is not necessary since it is already declared when
	// defining the metrics.  A node DA should change would be needed.
	samples[name] = new Sample(dataType,
                               0); // Default Value
	metrics.push(new Metric(name,
			                displayName,
			                description,
			                metricType,
			                dataType));
	instanceNames[instanceName] = true;
}

var metricGroups = exports.metricGroups = {};
var metricGroupNames = exports.metricGroupNames = ["Memory Management", "Process#CPU", "Process#I/O"];
var metricGroupID = 0;

metricGroups[metricGroupNames[metricGroupID]] = new MetricGroup(metricGroupID, 
                                                                metricGroupNames[metricGroupID],
                                                                "Memory Management metrics",
                                                                msgcon.Instance.Multi); // Needs to be multi to set instance name.

createMetric("Heap MBs in use", // Name
             "Heap MBs in use", // Display Name
             "Heap MBs in use", // Description
             "-Total-", // Instance name (6th part of namespace)
             msgcon.DataType.Double, // Data Type
             msgcon.MetricType.Value, //Metric Type
             metricGroups[metricGroupNames[metricGroupID]].metrics,
             metricGroups[metricGroupNames[metricGroupID]].samples,
             metricGroups[metricGroupNames[metricGroupID]].instanceNames);

createMetric("non-Heap MBs in use", // Name
             "non-Heap MBs in use", // Display Name
             "non-Heap MBs in use", // Description
             "-Total-", // Instance name (6th part of namespace)
             msgcon.DataType.Double, // Data Type
             msgcon.MetricType.Value, //Metric Type
             metricGroups[metricGroupNames[metricGroupID]].metrics,
             metricGroups[metricGroupNames[metricGroupID]].samples,
             metricGroups[metricGroupNames[metricGroupID]].instanceNames);

createMetric("MBs in use", // Name
             "MBs in use", // Display Name
             "MBs in use", // Description
             "-Total-", // Instance name (6th part of namespace)
             msgcon.DataType.Double, // Data Type
             msgcon.MetricType.Value, //Metric Type
             metricGroups[metricGroupNames[metricGroupID]].metrics,
             metricGroups[metricGroupNames[metricGroupID]].samples,
             metricGroups[metricGroupNames[metricGroupID]].instanceNames);

createMetric("MBs consumed / sec", // Name
             "MBs consumed / sec", // Display Name
             "MBs consumed / sec", // Description
             "", // Instance name (6th part of namespace)
             msgcon.DataType.Double, // Data Type
             msgcon.MetricType.Value, //Metric Type
             metricGroups[metricGroupNames[metricGroupID]].metrics,
             metricGroups[metricGroupNames[metricGroupID]].samples,
             metricGroups[metricGroupNames[metricGroupID]].instanceNames);

createMetric("garbage collections / sec", // Name
             "garbage collections / sec", // Display Name
             "garbage collections / sec", // Description
             "", // Instance name (6th part of namespace)
             msgcon.DataType.Double, // Data Type
             msgcon.MetricType.Value, //Metric Type
             metricGroups[metricGroupNames[metricGroupID]].metrics,
             metricGroups[metricGroupNames[metricGroupID]].samples,
             metricGroups[metricGroupNames[metricGroupID]].instanceNames);

createMetric("% time garbage collecting", // Name
             "% time garbage collecting", // Display Name
             "% time garbage collecting", // Description
             "", // Instance name (6th part of namespace)
             msgcon.DataType.Double, // Data Type
             msgcon.MetricType.Value, //Metric Type
             metricGroups[metricGroupNames[metricGroupID]].metrics,
             metricGroups[metricGroupNames[metricGroupID]].samples,
             metricGroups[metricGroupNames[metricGroupID]].instanceNames);

metricGroupID++;
metricGroups[metricGroupNames[metricGroupID]] = new MetricGroup(metricGroupID, 
                                                                metricGroupNames[metricGroupID],
                                                                "CPU metrics",
                                                                msgcon.Instance.Multi); // Needs to be multi to set instance name.

createMetric("Busy (%)", // Name
             "Busy (%)", // Display Name
             "CPU percent busy", // Description
             "", // Instance name (6th part of namespace)
             msgcon.DataType.Double, // Data Type
             msgcon.MetricType.Value, //Metric Type
             metricGroups[metricGroupNames[metricGroupID]].metrics,
             metricGroups[metricGroupNames[metricGroupID]].samples,
             metricGroups[metricGroupNames[metricGroupID]].instanceNames);

createMetric("System (%)", // Name
             "System (%)", // Display Name
             "CPU System percent busy", // Description
             "", // Instance name (6th part of namespace)
             msgcon.DataType.Double, // Data Type
             msgcon.MetricType.Value, //Metric Type
             metricGroups[metricGroupNames[metricGroupID]].metrics,
             metricGroups[metricGroupNames[metricGroupID]].samples,
             metricGroups[metricGroupNames[metricGroupID]].instanceNames);

createMetric("User (%)", // Name
             "User (%)", // Display Name
             "CPU User percent busy", // Description
             "", // Instance name (6th part of namespace)
             msgcon.DataType.Double, // Data Type
             msgcon.MetricType.Value, //Metric Type
             metricGroups[metricGroupNames[metricGroupID]].metrics,
             metricGroups[metricGroupNames[metricGroupID]].samples,
             metricGroups[metricGroupNames[metricGroupID]].instanceNames);

metricGroupID++;
metricGroups[metricGroupNames[metricGroupID]] = new MetricGroup(metricGroupID, 
                                                                metricGroupNames[metricGroupID],
                                                                "I/O metrics",
                                                                msgcon.Instance.Multi); // Needs to be multi to set instance name.

createMetric("Total (MB)", // Name
             "Total (MB)", // Display Name
             "Disk IO Reads/Writes", // Description
             "", // Instance name (6th part of namespace)
             msgcon.DataType.Double, // Data Type
             msgcon.MetricType.Value, //Metric Type
             metricGroups[metricGroupNames[metricGroupID]].metrics,
             metricGroups[metricGroupNames[metricGroupID]].samples,
             metricGroups[metricGroupNames[metricGroupID]].instanceNames);

createMetric("Read Total (MB)", // Name
             "Read Total (MB)", // Display Name
             "Disk IO Reads", // Description
             "", // Instance name (6th part of namespace)
             msgcon.DataType.Double, // Data Type
             msgcon.MetricType.Value, //Metric Type
             metricGroups[metricGroupNames[metricGroupID]].metrics,
             metricGroups[metricGroupNames[metricGroupID]].samples,
             metricGroups[metricGroupNames[metricGroupID]].instanceNames);

createMetric("Write Total (MB)", // Name
             "Write Total (MB)", // Display Name
             "Disk IO Writes", // Description
             "", // Instance name (6th part of namespace)
             msgcon.DataType.Double, // Data Type
             msgcon.MetricType.Value, //Metric Type
             metricGroups[metricGroupNames[metricGroupID]].metrics,
             metricGroups[metricGroupNames[metricGroupID]].samples,
             metricGroups[metricGroupNames[metricGroupID]].instanceNames);

createMetric("Other Total (MB)", // Name
             "Other Total (MB)", // Display Name
             "Disk IO Other", // Description
             "", // Instance name (6th part of namespace)
             msgcon.DataType.Double, // Data Type
             msgcon.MetricType.Value, //Metric Type
             metricGroups[metricGroupNames[metricGroupID]].metrics,
             metricGroups[metricGroupNames[metricGroupID]].samples,
             metricGroups[metricGroupNames[metricGroupID]].instanceNames);

// Define next group of metrics...
//metricGroupID++;
