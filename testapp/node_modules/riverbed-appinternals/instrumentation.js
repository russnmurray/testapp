/* ****************************
** Copyright (c) 2015        **
** Riverbed Technology, Inc. **
** All Rights Reserved.      **
** ************************* */

"use strict";

// *****************************
// Overall Instrumentation Module
// *****************************

// required modules
var traceConfig = require('./lib/trace-config'),
	traceOutput = require('./lib/trace-output-api'),
	traceHttp = require('./lib/trace-http'),
	traceEnv = require('./lib/trace-env'),
	traceInput = require('./lib/trace-input-api'),
	traceMoniker = require('./lib/trace-moniker'),
	traceModuleDetection = require('./lib/trace-module-detection');

// -----------------------------
// Initialization function to trigger all the instrumentation
// -----------------------------
module.exports = function (options) {

	// STEP0: get moniker
	// Before doing anything we need to determine the process moniker
	// This will be used for everything from here e.g. knowing which config files to look at
	traceMoniker.init(options);

	// STEP1: init conifg using info from local filesystem
	traceConfig.init(options);

	// STEP2: set up connection to DA 
	// make request to get config info (such as short-circuit status) from DA
	if(options && options.localDebugNoDA) {
		console.log('not connecting to DA');
	} else {
		traceOutput.connectDA(options);
	}

	// STEP3: Instrument if config says we should
	// check if we should instrument or not before doing instrumentation.
	// this will allow the application to start up in an un-instrumented mode
	// without the user needing to remove the line of instrumentation JS from their application
	// NOTE: short-circuiting status may (probably will) be updated at a later point, when config
	// update is received from the DA. The request is made in Step 2, but it is async, so we many
	// not have  gotten the response with short-circuit status yet. We default to short-circuited until 
	// we hear otherwise.
	if(traceConfig.shouldInstrument()) {
		if(options && options.localDebugHookImmediately) {
			traceConfig.setShortCircuited(false);
		}
		traceOutput.init((options?options.outputPath:null));
		traceHttp.instrumentHttp();
		// detect if user's app requires any modules for which he have special instrumentation that can be enabled
		traceModuleDetection.init();
		// NOTE: we don't include an internal reference to these things in the instrumentation module's node_modules directory
		// That's because we need to be referring to the same module instance as the user's application.
		// This means we don't want to turn on these instrumentation modules unless the user's application references them
		// If they were turned on and that module isn't installed, our call to require in the instrumentation module would fail.
		// Anything that is not explicitly enabled by an option or detection should include an internal reference in node_modules
		// for the instrumentation module and should not
		// need to use the same reference to the module as the user's code.
		traceEnv.init(options);
	}

	if(traceConfig.isDebugMode()) {
		// Set up a little HTTP server to listen for commands
		// E.g. config change (short-circuit), start/stop profiling, etc
		// NOTE: typically don't want to do this in production.
		// Only enable it in debug mode!!!
		traceInput.init((options?options.commandPort:null));	
	}

};