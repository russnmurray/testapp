/* ****************************
** Copyright (c) 2015        **
** Riverbed Technology, Inc. **
** All Rights Reserved.      **
** ************************* */

"use strict";

// *****************************
// Input Module
// Runs as a separate process and accepts commands 
// (e.g. start/stop CPU Profiling)
// *****************************

// required modules
var http = require('http'),
	url = require('url'),
	uuid = require('uuid'),
	traceOutput = require('./trace-output-api'),
	util = require('util'),
	traceUtil = require('./trace-util');

// internal variables
var listenPort = process.argv[2],
	supportedFeatures = {};

function startsWith(long, short) {
	if(!long || ! short) return false;
	if(long.length < short.length) return false;
	return (long.substring(0,short.length) == short);
}

function endsWith(long, short) {
	if(!long || ! short) return false;
	if(long.length < short.length) return false;
	return (long.substring(long.length-short.length,long.length) == short);
}

// find out when feature support is added
process.on("message",function(m){
	if(m.newFeatures) {
		if (util.isArray(m.newFeatures)) {
			for(var i=0; i<m.newFeatures.length; i++) {
				supportedFeatures[m.newFeatures[i]] = true;
			}
		} else if(traceUtil.isString(m.newFeatures)){
			supportedFeatures[m.newFeatures] = true;
		}
	} 
});

var server = http.createServer(function(req,resp){

	var pathname = url.parse(req.url).pathname;

	if(req.method=="GET") {
		// GET /profile/start to begin profiling
		// returns the uuid for that profile
		if(startsWith(pathname,"/profile/start")) {
			if(supportedFeatures['v8-profiler']) {
				// generate unique id
				var startedId = uuid.v4();
				// send the command to the parent process
				process.send({'type':'profile','action':'start','id':startedId});
				// send response to client
				resp.writeHead(200, { 'content-type': 'text/plain' });
				resp.end(startedId);
			} else {
				resp.writeHead(501, { 'content-type': 'text/plain' });
				resp.end('CPU profiling not supported');
			}
		} else if (startsWith(pathname,"/profile/stop/")) {
			if(supportedFeatures['v8-profiler']) {
				var parts = pathname.split('/');
				if(parts.length>3 && parts[3] && parts[3].length > 0) {
					var stoppedId = parts[3];
					// send the command to the parent process
					process.send({'type':'profile','action':'stop','id':stoppedId});
					// send response to client
					resp.writeHead(200, { 'content-type': 'text/plain' });
					resp.end(stoppedId);
				} else {
					resp.writeHead(404, { 'content-type': 'text/plain' });
					resp.end('no id specified');
				}
			} else {
				resp.writeHead(501, { 'content-type': 'text/plain' });
				resp.end('CPU profiling not supported');
			}
		} else if (startsWith(pathname,"/heapsnapshot")) {
			if(supportedFeatures['v8-profiler']) {
				// generate unique id
				var heapId = uuid.v4();
				// send the command to the parent process
				process.send({'type':'heapsnapshot','id':heapId});
				// send response to client
				resp.writeHead(200, { 'content-type': 'text/plain' });
				resp.end(heapId);
			} else {
				resp.writeHead(501, { 'content-type': 'text/plain' });
				resp.end('Heap snapshots not supported');
			}
		} else if (startsWith(pathname,"/bypassed")) {
			process.send({'type':'shortcircuit','isShortCircuit':true});
			// send response to client
			resp.writeHead(200, { 'content-type': 'text/plain' });
			resp.end("");
		} else if (startsWith(pathname,"/unbypassed")) {
			process.send({'type':'shortcircuit','isShortCircuit':false});
			// send response to client
			resp.writeHead(200, { 'content-type': 'text/plain' });
			resp.end("");
		} else if (startsWith(pathname,"/hooked")) {
			process.send({'type':'instrument','hook':true});
			// send response to client
			resp.writeHead(200, { 'content-type': 'text/plain' });
			resp.end("");
		} else if (startsWith(pathname,"/unhooked")) {
			process.send({'type':'instrument','hook':false});
			// send response to client
			resp.writeHead(200, { 'content-type': 'text/plain' });
			resp.end("");
		} else {
			//TODO: add more commands to handle
			resp.writeHead(404, { 'content-type': 'text/plain' });
			resp.end('unknown command');
		}
	} else  {
		//TODO: add more commands to handle
		resp.writeHead(404, { 'content-type': 'text/plain' });
		resp.end('unknown command');
	}
});

traceOutput.info('trace-input-process.init','listening for input commands on port '+listenPort);
server.listen(listenPort);

// listen for this to be disconnected from the parent.
// when that happens, shutdown the http server and then terminate the child process.
process.on("disconnect",function(){
	server.close(function(){
		process.exit();
	});
});

