/* ****************************
** Copyright (c) 2015        **
** Riverbed Technology, Inc. **
** All Rights Reserved.      **
** ************************* */

"use strict";

// *****************************
// Input Module (API)
// Listens to child process accepting commands
// and handles what to do with each of those
// *****************************

// required modules
var traceProfile = require('./trace-profile'),
	traceConfig = require('./trace-config'),
	traceOutput = require('./trace-output-api'),
	traceEnv = require('./trace-env');

// internal variables
var defaultPort = 5411,
	child;

// -----------------------------
// External Functions
// -----------------------------

var init = exports.init = function(port) {
	var path = module.filename.substring(0,module.filename.length-"trace-input-api.js".length);
	child = require('child_process').fork(path+'/trace-input-process.js',[port?port:defaultPort]);
	child.on('message',function(message){
		if(message){
			if(message.type == 'profile') {
				if(message.id) {
					if(message.action=='start') {
						traceOutput.debug('trace-input-api.message','received profiling start command with id: '+message.id);
						traceProfile.startProfiling(message.id);
					} else if (message.action=='stop') {
						traceOutput.debug('trace-input-api.message','received profiling stop command with id: '+message.id);
						traceProfile.stopProfiling(message.id);
					}
				}
			} else if(message.type == 'heapsnapshot') {
				if(message.id) {
					traceOutput.debug('trace-input-api.message','received heap snapshot command with id: '+message.id);
					traceProfile.takeSnapshot(message.id);
				}
			} else if (message.type == 'shortcircuit') {
				if(message.isShortCircuit != traceConfig.isShortCircuited() ) {
					// only do something if there's actually a change of state
					traceConfig.setShortCircuited(message.isShortCircuit);
					traceOutput.updateShortCircuiting();
					traceEnv.updateShortCircuiting();
				}
			} else if (message.type == 'instrument') {
				traceConfig.setShouldInstrument(message.hook);
			}
		}
	});

	process.on("exit",function(){
		// need to tear down child process whenever main process is done.
		child.disconnect();
	});	
};

// pass along info to input handling about additional feature support
// expecting a string or an array of strings
var addFeatureSupport = exports.addFeatureSupport = function(newFeatures) {
	if(child) {
		traceOutput.info('trace-input-api.addFeatureSupport','adding support for features: '+newFeatures);
		child.send({"newFeatures":newFeatures});
	}
}