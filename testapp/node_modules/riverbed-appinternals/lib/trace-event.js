/* ****************************
** Copyright (c) 2015        **
** Riverbed Technology, Inc. **
** All Rights Reserved.      **
** ************************* */

"use strict";

// *****************************
// Common Event Handling Module
// *****************************

// required modules
var emitterListener = require('emitter-listener'),
	traceCLS = require('./trace-cls'),
	traceOutput = require('./trace-output-api'),
	traceUtil = require('./trace-util');

// no-op 'mark' wrapper.  From test methods in emitter-listener.
function noOp() {};

// convenience function for wrapping emitter listeners w/ noOp for onAdd
var wrapEmitter = exports.wrapEmitter = function(emitter,wrapper) {
	return emitterListener(emitter,noOp,wrapper);
};

// -----------------------------
// Handling of end event for a given field 
// (e.g. sql, outboundRequests)
// -----------------------------

var setEndTime = exports.setEndTime = function(obj) {
	if(obj.endTime) {
		traceOutput.debug("setEndTime","End time already handled. Will not update trace.");
	} else { 
		obj.endTime = Date.now();
		obj.responseTime = (obj.endTime.getTime() - obj.startTime.getTime())/1000.0;
		traceOutput.debug("setEndTime","updated trace with end time");
	}
}

var setEndTimeAndHandlerName = exports.setEndTimeAndHandlerName = function(obj,userHandler) {
	if(obj.endTime) {
		traceOutput.debug("setEndTimeAndHandlerName","End time already handled. Will not update trace.");
	} else { 
		obj.endTime = Date.now();
		obj.responseTime = (obj.endTime.getTime() - obj.startTime.getTime())/1000.0;
        obj.responseHandler=traceUtil.getFunctionName(userHandler);
		traceOutput.debug("setEndTimeAndHandlerName","updated trace with end");
	}
};

var handleEndEvent = exports.handleEndEvent = function(id,userHandler,field) {
	traceCLS.ifDataDo("event.handleEndEvent",function(tracingData){
		var req = tracingData[field][id];
		if (req) {
			setEndTimeAndHandlerName(req,userHandler);
		} else {
			traceOutput.warn("event.handleEndEvent","found trace but did not contain data for "+field+": "+id);
		}
	});
};

// -----------------------------
// Use to hook a named list events for Event Emitters. Note that the preview Handler should call the original handler when it's done.
// this isn't done automatically in case the preview handler wants to modify the args to the userHandler
// -----------------------------

var wrapEventEmitterHandlerToPreview = exports.wrapEventEmitterHandlerToPreview = function (eventsList, previewHandler) {
	return function wrappedEmitterHandler(userHandler,eventType) {
    	// return our result, which will be called instead of the user handler
    	return function () {
    		// First, make sure the arguments are an actual array.
			var args = Array.prototype.slice.call(arguments);

            // only want to handle certain event types as the end event. don't do anything for other events
            if(eventsList.indexOf(eventType) >= 0) {
	    		return previewHandler(eventType,userHandler,args,this);
	        } else {
	        	// call the actual handler (the user's handler).
	             // return handler.apply(this, args);
	            // ORIG
	            return userHandler.apply(this, args);
	        }     
      };
 	};
};
